// Code generated by ogen, DO NOT EDIT.

package talentv2

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type ErrorResponse struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorResponse) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorResponse) SetError(val string) {
	s.Error = val
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

// Merged schema.
// Ref: #/components/schemas/Event
type Event struct {
	// ID мероприятия.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Мероприятие находится в статусе черновика.
	// На такое мероприятие нельзя зарегистрироваться.
	Draft bool `json:"draft"`
	// Статус публичности мероприятия.
	Public bool `json:"public"`
	// Исключение мероприятия из календаря.
	Hidden bool `json:"hidden"`
	// Статус отмены мероприятия.
	Canceled bool `json:"canceled"`
	// Название мероприятия.
	Title string `json:"title"`
	// Дата начала мероприятия.
	Start OptDateTime `json:"start"`
	// Дата окончания мероприятия.
	End OptDateTime `json:"end"`
	// Формат проведения мероприятия.
	Format OptEventFormat `json:"format"`
	// ID организации мероприятия.
	OrganizationID OptInt32 `json:"organization_id"`
	// ID мета-мероприятия.
	MetaEventID OptInt32 `json:"meta_event_id"`
	// ID автора мероприятия.
	CreatedByID OptInt32 `json:"created_by_id"`
	// ID [площадки](/venue-api/docs/).
	VenueID OptInt32 `json:"venue_id"`
	// Допуск на создания достижений на это мероприятие.
	AchievementsAllowed    bool `json:"achievements_allowed"`
	RequestsAllowed        bool `json:"requests_allowed"`
	SimplifiedRegistration bool `json:"simplified_registration"`
	SelfCheckIn            bool `json:"self_check_in"`
	// Формат участия.
	TeamsInvolved          EventTeamsInvolved           `json:"teams_involved"`
	OwnerCanModerate       bool                         `json:"owner_can_moderate"`
	UserInMultipleTeams    bool                         `json:"user_in_multiple_teams"`
	MentorsAllowed         bool                         `json:"mentors_allowed"`
	SupportI18n            bool                         `json:"support_i18n"`
	GirCollection          bool                         `json:"gir_collection"`
	TimeMatters            bool                         `json:"time_matters"`
	Promoted               bool                         `json:"promoted"`
	MaxUsers               OptInt                       `json:"max_users"`
	TeamCreateNotification bool                         `json:"team_create_notification"`
	TeamAssignmentMethod   OptEventTeamAssignmentMethod `json:"team_assignment_method"`
	DiplomasDarkTheme      bool                         `json:"diplomas_dark_theme"`
	// Статус выдачи дипломов. Отсутствие значения означает
	// что дипломы не выданы.
	IsDiplomasIssued      OptEventIsDiplomasIssued `json:"is_diplomas_issued"`
	AchievementRolesCount int32                    `json:"achievement_roles_count"`
	AchievementsCount     int32                    `json:"achievements_count"`
	RequestsCount         int32                    `json:"requests_count"`
	Cover                 OptString                `json:"cover"`
	Background            OptString                `json:"background"`
	// Адрес online мероприятия.
	URL OptString `json:"url"`
	// ID типа мероприятия.
	TypeID        OptInt32    `json:"type_id"`
	ExpectedStart OptDateTime `json:"expected_start"`
	// Описание мероприятия.
	Description OptString `json:"description"`
	// Альтернативное название мероприятия.
	AltTitle OptString `json:"alt_title"`
	// Причина отмены мероприятия.
	CancellationReason OptString `json:"cancellation_reason"`
	// Сообщение о заполненной анкете.
	QuestionnaireCompletedMessage OptString `json:"questionnaire_completed_message"`
}

// GetID returns the value of ID.
func (s *Event) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Event) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Event) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDraft returns the value of Draft.
func (s *Event) GetDraft() bool {
	return s.Draft
}

// GetPublic returns the value of Public.
func (s *Event) GetPublic() bool {
	return s.Public
}

// GetHidden returns the value of Hidden.
func (s *Event) GetHidden() bool {
	return s.Hidden
}

// GetCanceled returns the value of Canceled.
func (s *Event) GetCanceled() bool {
	return s.Canceled
}

// GetTitle returns the value of Title.
func (s *Event) GetTitle() string {
	return s.Title
}

// GetStart returns the value of Start.
func (s *Event) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Event) GetEnd() OptDateTime {
	return s.End
}

// GetFormat returns the value of Format.
func (s *Event) GetFormat() OptEventFormat {
	return s.Format
}

// GetOrganizationID returns the value of OrganizationID.
func (s *Event) GetOrganizationID() OptInt32 {
	return s.OrganizationID
}

// GetMetaEventID returns the value of MetaEventID.
func (s *Event) GetMetaEventID() OptInt32 {
	return s.MetaEventID
}

// GetCreatedByID returns the value of CreatedByID.
func (s *Event) GetCreatedByID() OptInt32 {
	return s.CreatedByID
}

// GetVenueID returns the value of VenueID.
func (s *Event) GetVenueID() OptInt32 {
	return s.VenueID
}

// GetAchievementsAllowed returns the value of AchievementsAllowed.
func (s *Event) GetAchievementsAllowed() bool {
	return s.AchievementsAllowed
}

// GetRequestsAllowed returns the value of RequestsAllowed.
func (s *Event) GetRequestsAllowed() bool {
	return s.RequestsAllowed
}

// GetSimplifiedRegistration returns the value of SimplifiedRegistration.
func (s *Event) GetSimplifiedRegistration() bool {
	return s.SimplifiedRegistration
}

// GetSelfCheckIn returns the value of SelfCheckIn.
func (s *Event) GetSelfCheckIn() bool {
	return s.SelfCheckIn
}

// GetTeamsInvolved returns the value of TeamsInvolved.
func (s *Event) GetTeamsInvolved() EventTeamsInvolved {
	return s.TeamsInvolved
}

// GetOwnerCanModerate returns the value of OwnerCanModerate.
func (s *Event) GetOwnerCanModerate() bool {
	return s.OwnerCanModerate
}

// GetUserInMultipleTeams returns the value of UserInMultipleTeams.
func (s *Event) GetUserInMultipleTeams() bool {
	return s.UserInMultipleTeams
}

// GetMentorsAllowed returns the value of MentorsAllowed.
func (s *Event) GetMentorsAllowed() bool {
	return s.MentorsAllowed
}

// GetSupportI18n returns the value of SupportI18n.
func (s *Event) GetSupportI18n() bool {
	return s.SupportI18n
}

// GetGirCollection returns the value of GirCollection.
func (s *Event) GetGirCollection() bool {
	return s.GirCollection
}

// GetTimeMatters returns the value of TimeMatters.
func (s *Event) GetTimeMatters() bool {
	return s.TimeMatters
}

// GetPromoted returns the value of Promoted.
func (s *Event) GetPromoted() bool {
	return s.Promoted
}

// GetMaxUsers returns the value of MaxUsers.
func (s *Event) GetMaxUsers() OptInt {
	return s.MaxUsers
}

// GetTeamCreateNotification returns the value of TeamCreateNotification.
func (s *Event) GetTeamCreateNotification() bool {
	return s.TeamCreateNotification
}

// GetTeamAssignmentMethod returns the value of TeamAssignmentMethod.
func (s *Event) GetTeamAssignmentMethod() OptEventTeamAssignmentMethod {
	return s.TeamAssignmentMethod
}

// GetDiplomasDarkTheme returns the value of DiplomasDarkTheme.
func (s *Event) GetDiplomasDarkTheme() bool {
	return s.DiplomasDarkTheme
}

// GetIsDiplomasIssued returns the value of IsDiplomasIssued.
func (s *Event) GetIsDiplomasIssued() OptEventIsDiplomasIssued {
	return s.IsDiplomasIssued
}

// GetAchievementRolesCount returns the value of AchievementRolesCount.
func (s *Event) GetAchievementRolesCount() int32 {
	return s.AchievementRolesCount
}

// GetAchievementsCount returns the value of AchievementsCount.
func (s *Event) GetAchievementsCount() int32 {
	return s.AchievementsCount
}

// GetRequestsCount returns the value of RequestsCount.
func (s *Event) GetRequestsCount() int32 {
	return s.RequestsCount
}

// GetCover returns the value of Cover.
func (s *Event) GetCover() OptString {
	return s.Cover
}

// GetBackground returns the value of Background.
func (s *Event) GetBackground() OptString {
	return s.Background
}

// GetURL returns the value of URL.
func (s *Event) GetURL() OptString {
	return s.URL
}

// GetTypeID returns the value of TypeID.
func (s *Event) GetTypeID() OptInt32 {
	return s.TypeID
}

// GetExpectedStart returns the value of ExpectedStart.
func (s *Event) GetExpectedStart() OptDateTime {
	return s.ExpectedStart
}

// GetDescription returns the value of Description.
func (s *Event) GetDescription() OptString {
	return s.Description
}

// GetAltTitle returns the value of AltTitle.
func (s *Event) GetAltTitle() OptString {
	return s.AltTitle
}

// GetCancellationReason returns the value of CancellationReason.
func (s *Event) GetCancellationReason() OptString {
	return s.CancellationReason
}

// GetQuestionnaireCompletedMessage returns the value of QuestionnaireCompletedMessage.
func (s *Event) GetQuestionnaireCompletedMessage() OptString {
	return s.QuestionnaireCompletedMessage
}

// SetID sets the value of ID.
func (s *Event) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Event) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Event) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDraft sets the value of Draft.
func (s *Event) SetDraft(val bool) {
	s.Draft = val
}

// SetPublic sets the value of Public.
func (s *Event) SetPublic(val bool) {
	s.Public = val
}

// SetHidden sets the value of Hidden.
func (s *Event) SetHidden(val bool) {
	s.Hidden = val
}

// SetCanceled sets the value of Canceled.
func (s *Event) SetCanceled(val bool) {
	s.Canceled = val
}

// SetTitle sets the value of Title.
func (s *Event) SetTitle(val string) {
	s.Title = val
}

// SetStart sets the value of Start.
func (s *Event) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Event) SetEnd(val OptDateTime) {
	s.End = val
}

// SetFormat sets the value of Format.
func (s *Event) SetFormat(val OptEventFormat) {
	s.Format = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *Event) SetOrganizationID(val OptInt32) {
	s.OrganizationID = val
}

// SetMetaEventID sets the value of MetaEventID.
func (s *Event) SetMetaEventID(val OptInt32) {
	s.MetaEventID = val
}

// SetCreatedByID sets the value of CreatedByID.
func (s *Event) SetCreatedByID(val OptInt32) {
	s.CreatedByID = val
}

// SetVenueID sets the value of VenueID.
func (s *Event) SetVenueID(val OptInt32) {
	s.VenueID = val
}

// SetAchievementsAllowed sets the value of AchievementsAllowed.
func (s *Event) SetAchievementsAllowed(val bool) {
	s.AchievementsAllowed = val
}

// SetRequestsAllowed sets the value of RequestsAllowed.
func (s *Event) SetRequestsAllowed(val bool) {
	s.RequestsAllowed = val
}

// SetSimplifiedRegistration sets the value of SimplifiedRegistration.
func (s *Event) SetSimplifiedRegistration(val bool) {
	s.SimplifiedRegistration = val
}

// SetSelfCheckIn sets the value of SelfCheckIn.
func (s *Event) SetSelfCheckIn(val bool) {
	s.SelfCheckIn = val
}

// SetTeamsInvolved sets the value of TeamsInvolved.
func (s *Event) SetTeamsInvolved(val EventTeamsInvolved) {
	s.TeamsInvolved = val
}

// SetOwnerCanModerate sets the value of OwnerCanModerate.
func (s *Event) SetOwnerCanModerate(val bool) {
	s.OwnerCanModerate = val
}

// SetUserInMultipleTeams sets the value of UserInMultipleTeams.
func (s *Event) SetUserInMultipleTeams(val bool) {
	s.UserInMultipleTeams = val
}

// SetMentorsAllowed sets the value of MentorsAllowed.
func (s *Event) SetMentorsAllowed(val bool) {
	s.MentorsAllowed = val
}

// SetSupportI18n sets the value of SupportI18n.
func (s *Event) SetSupportI18n(val bool) {
	s.SupportI18n = val
}

// SetGirCollection sets the value of GirCollection.
func (s *Event) SetGirCollection(val bool) {
	s.GirCollection = val
}

// SetTimeMatters sets the value of TimeMatters.
func (s *Event) SetTimeMatters(val bool) {
	s.TimeMatters = val
}

// SetPromoted sets the value of Promoted.
func (s *Event) SetPromoted(val bool) {
	s.Promoted = val
}

// SetMaxUsers sets the value of MaxUsers.
func (s *Event) SetMaxUsers(val OptInt) {
	s.MaxUsers = val
}

// SetTeamCreateNotification sets the value of TeamCreateNotification.
func (s *Event) SetTeamCreateNotification(val bool) {
	s.TeamCreateNotification = val
}

// SetTeamAssignmentMethod sets the value of TeamAssignmentMethod.
func (s *Event) SetTeamAssignmentMethod(val OptEventTeamAssignmentMethod) {
	s.TeamAssignmentMethod = val
}

// SetDiplomasDarkTheme sets the value of DiplomasDarkTheme.
func (s *Event) SetDiplomasDarkTheme(val bool) {
	s.DiplomasDarkTheme = val
}

// SetIsDiplomasIssued sets the value of IsDiplomasIssued.
func (s *Event) SetIsDiplomasIssued(val OptEventIsDiplomasIssued) {
	s.IsDiplomasIssued = val
}

// SetAchievementRolesCount sets the value of AchievementRolesCount.
func (s *Event) SetAchievementRolesCount(val int32) {
	s.AchievementRolesCount = val
}

// SetAchievementsCount sets the value of AchievementsCount.
func (s *Event) SetAchievementsCount(val int32) {
	s.AchievementsCount = val
}

// SetRequestsCount sets the value of RequestsCount.
func (s *Event) SetRequestsCount(val int32) {
	s.RequestsCount = val
}

// SetCover sets the value of Cover.
func (s *Event) SetCover(val OptString) {
	s.Cover = val
}

// SetBackground sets the value of Background.
func (s *Event) SetBackground(val OptString) {
	s.Background = val
}

// SetURL sets the value of URL.
func (s *Event) SetURL(val OptString) {
	s.URL = val
}

// SetTypeID sets the value of TypeID.
func (s *Event) SetTypeID(val OptInt32) {
	s.TypeID = val
}

// SetExpectedStart sets the value of ExpectedStart.
func (s *Event) SetExpectedStart(val OptDateTime) {
	s.ExpectedStart = val
}

// SetDescription sets the value of Description.
func (s *Event) SetDescription(val OptString) {
	s.Description = val
}

// SetAltTitle sets the value of AltTitle.
func (s *Event) SetAltTitle(val OptString) {
	s.AltTitle = val
}

// SetCancellationReason sets the value of CancellationReason.
func (s *Event) SetCancellationReason(val OptString) {
	s.CancellationReason = val
}

// SetQuestionnaireCompletedMessage sets the value of QuestionnaireCompletedMessage.
func (s *Event) SetQuestionnaireCompletedMessage(val OptString) {
	s.QuestionnaireCompletedMessage = val
}

// Формат проведения мероприятия.
type EventFormat string

const (
	EventFormatOffline EventFormat = "offline"
	EventFormatOnline  EventFormat = "online"
)

// AllValues returns all EventFormat values.
func (EventFormat) AllValues() []EventFormat {
	return []EventFormat{
		EventFormatOffline,
		EventFormatOnline,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventFormat) MarshalText() ([]byte, error) {
	switch s {
	case EventFormatOffline:
		return []byte(s), nil
	case EventFormatOnline:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventFormat) UnmarshalText(data []byte) error {
	switch EventFormat(data) {
	case EventFormatOffline:
		*s = EventFormatOffline
		return nil
	case EventFormatOnline:
		*s = EventFormatOnline
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Статус выдачи дипломов. Отсутствие значения означает
// что дипломы не выданы.
type EventIsDiplomasIssued string

const (
	EventIsDiplomasIssuedAll   EventIsDiplomasIssued = "all"
	EventIsDiplomasIssuedRoles EventIsDiplomasIssued = "roles"
)

// AllValues returns all EventIsDiplomasIssued values.
func (EventIsDiplomasIssued) AllValues() []EventIsDiplomasIssued {
	return []EventIsDiplomasIssued{
		EventIsDiplomasIssuedAll,
		EventIsDiplomasIssuedRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventIsDiplomasIssued) MarshalText() ([]byte, error) {
	switch s {
	case EventIsDiplomasIssuedAll:
		return []byte(s), nil
	case EventIsDiplomasIssuedRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventIsDiplomasIssued) UnmarshalText(data []byte) error {
	switch EventIsDiplomasIssued(data) {
	case EventIsDiplomasIssuedAll:
		*s = EventIsDiplomasIssuedAll
		return nil
	case EventIsDiplomasIssuedRoles:
		*s = EventIsDiplomasIssuedRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EventMeta
type EventMeta struct {
	// ID мероприятия.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Мероприятие находится в статусе черновика.
	// На такое мероприятие нельзя зарегистрироваться.
	Draft bool `json:"draft"`
	// Статус публичности мероприятия.
	Public bool `json:"public"`
	// Исключение мероприятия из календаря.
	Hidden bool `json:"hidden"`
	// Статус отмены мероприятия.
	Canceled bool `json:"canceled"`
	// Название мероприятия.
	Title string `json:"title"`
	// Дата начала мероприятия.
	Start OptDateTime `json:"start"`
	// Дата окончания мероприятия.
	End OptDateTime `json:"end"`
	// Формат проведения мероприятия.
	Format OptEventMetaFormat `json:"format"`
	// ID организации мероприятия.
	OrganizationID OptInt32 `json:"organization_id"`
	// ID мета-мероприятия.
	MetaEventID OptInt32 `json:"meta_event_id"`
	// ID автора мероприятия.
	CreatedByID OptInt32 `json:"created_by_id"`
	// ID [площадки](/venue-api/docs/).
	VenueID OptInt32 `json:"venue_id"`
}

// GetID returns the value of ID.
func (s *EventMeta) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *EventMeta) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *EventMeta) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDraft returns the value of Draft.
func (s *EventMeta) GetDraft() bool {
	return s.Draft
}

// GetPublic returns the value of Public.
func (s *EventMeta) GetPublic() bool {
	return s.Public
}

// GetHidden returns the value of Hidden.
func (s *EventMeta) GetHidden() bool {
	return s.Hidden
}

// GetCanceled returns the value of Canceled.
func (s *EventMeta) GetCanceled() bool {
	return s.Canceled
}

// GetTitle returns the value of Title.
func (s *EventMeta) GetTitle() string {
	return s.Title
}

// GetStart returns the value of Start.
func (s *EventMeta) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *EventMeta) GetEnd() OptDateTime {
	return s.End
}

// GetFormat returns the value of Format.
func (s *EventMeta) GetFormat() OptEventMetaFormat {
	return s.Format
}

// GetOrganizationID returns the value of OrganizationID.
func (s *EventMeta) GetOrganizationID() OptInt32 {
	return s.OrganizationID
}

// GetMetaEventID returns the value of MetaEventID.
func (s *EventMeta) GetMetaEventID() OptInt32 {
	return s.MetaEventID
}

// GetCreatedByID returns the value of CreatedByID.
func (s *EventMeta) GetCreatedByID() OptInt32 {
	return s.CreatedByID
}

// GetVenueID returns the value of VenueID.
func (s *EventMeta) GetVenueID() OptInt32 {
	return s.VenueID
}

// SetID sets the value of ID.
func (s *EventMeta) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *EventMeta) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *EventMeta) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDraft sets the value of Draft.
func (s *EventMeta) SetDraft(val bool) {
	s.Draft = val
}

// SetPublic sets the value of Public.
func (s *EventMeta) SetPublic(val bool) {
	s.Public = val
}

// SetHidden sets the value of Hidden.
func (s *EventMeta) SetHidden(val bool) {
	s.Hidden = val
}

// SetCanceled sets the value of Canceled.
func (s *EventMeta) SetCanceled(val bool) {
	s.Canceled = val
}

// SetTitle sets the value of Title.
func (s *EventMeta) SetTitle(val string) {
	s.Title = val
}

// SetStart sets the value of Start.
func (s *EventMeta) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *EventMeta) SetEnd(val OptDateTime) {
	s.End = val
}

// SetFormat sets the value of Format.
func (s *EventMeta) SetFormat(val OptEventMetaFormat) {
	s.Format = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *EventMeta) SetOrganizationID(val OptInt32) {
	s.OrganizationID = val
}

// SetMetaEventID sets the value of MetaEventID.
func (s *EventMeta) SetMetaEventID(val OptInt32) {
	s.MetaEventID = val
}

// SetCreatedByID sets the value of CreatedByID.
func (s *EventMeta) SetCreatedByID(val OptInt32) {
	s.CreatedByID = val
}

// SetVenueID sets the value of VenueID.
func (s *EventMeta) SetVenueID(val OptInt32) {
	s.VenueID = val
}

// Формат проведения мероприятия.
type EventMetaFormat string

const (
	EventMetaFormatOffline EventMetaFormat = "offline"
	EventMetaFormatOnline  EventMetaFormat = "online"
)

// AllValues returns all EventMetaFormat values.
func (EventMetaFormat) AllValues() []EventMetaFormat {
	return []EventMetaFormat{
		EventMetaFormatOffline,
		EventMetaFormatOnline,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventMetaFormat) MarshalText() ([]byte, error) {
	switch s {
	case EventMetaFormatOffline:
		return []byte(s), nil
	case EventMetaFormatOnline:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventMetaFormat) UnmarshalText(data []byte) error {
	switch EventMetaFormat(data) {
	case EventMetaFormatOffline:
		*s = EventMetaFormatOffline
		return nil
	case EventMetaFormatOnline:
		*s = EventMetaFormatOnline
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// EventRetrieveNotFound is response for EventRetrieve operation.
type EventRetrieveNotFound struct{}

func (*EventRetrieveNotFound) eventRetrieveRes() {}

// EventRetrieveOK represents sum type.
type EventRetrieveOK struct {
	Type      EventRetrieveOKType // switch on this field
	EventMeta EventMeta
	Event     Event
}

// EventRetrieveOKType is oneOf type of EventRetrieveOK.
type EventRetrieveOKType string

// Possible values for EventRetrieveOKType.
const (
	EventMetaEventRetrieveOK EventRetrieveOKType = "EventMeta"
	EventEventRetrieveOK     EventRetrieveOKType = "Event"
)

// IsEventMeta reports whether EventRetrieveOK is EventMeta.
func (s EventRetrieveOK) IsEventMeta() bool { return s.Type == EventMetaEventRetrieveOK }

// IsEvent reports whether EventRetrieveOK is Event.
func (s EventRetrieveOK) IsEvent() bool { return s.Type == EventEventRetrieveOK }

// SetEventMeta sets EventRetrieveOK to EventMeta.
func (s *EventRetrieveOK) SetEventMeta(v EventMeta) {
	s.Type = EventMetaEventRetrieveOK
	s.EventMeta = v
}

// GetEventMeta returns EventMeta and true boolean if EventRetrieveOK is EventMeta.
func (s EventRetrieveOK) GetEventMeta() (v EventMeta, ok bool) {
	if !s.IsEventMeta() {
		return v, false
	}
	return s.EventMeta, true
}

// NewEventMetaEventRetrieveOK returns new EventRetrieveOK from EventMeta.
func NewEventMetaEventRetrieveOK(v EventMeta) EventRetrieveOK {
	var s EventRetrieveOK
	s.SetEventMeta(v)
	return s
}

// SetEvent sets EventRetrieveOK to Event.
func (s *EventRetrieveOK) SetEvent(v Event) {
	s.Type = EventEventRetrieveOK
	s.Event = v
}

// GetEvent returns Event and true boolean if EventRetrieveOK is Event.
func (s EventRetrieveOK) GetEvent() (v Event, ok bool) {
	if !s.IsEvent() {
		return v, false
	}
	return s.Event, true
}

// NewEventEventRetrieveOK returns new EventRetrieveOK from Event.
func NewEventEventRetrieveOK(v Event) EventRetrieveOK {
	var s EventRetrieveOK
	s.SetEvent(v)
	return s
}

func (*EventRetrieveOK) eventRetrieveRes() {}

type EventTeamAssignmentMethod string

const (
	EventTeamAssignmentMethodCompletion     EventTeamAssignmentMethod = "completion"
	EventTeamAssignmentMethodCompletionSoft EventTeamAssignmentMethod = "completion_soft"
	EventTeamAssignmentMethodSingle         EventTeamAssignmentMethod = "single"
	EventTeamAssignmentMethodSingleSoft     EventTeamAssignmentMethod = "single_soft"
)

// AllValues returns all EventTeamAssignmentMethod values.
func (EventTeamAssignmentMethod) AllValues() []EventTeamAssignmentMethod {
	return []EventTeamAssignmentMethod{
		EventTeamAssignmentMethodCompletion,
		EventTeamAssignmentMethodCompletionSoft,
		EventTeamAssignmentMethodSingle,
		EventTeamAssignmentMethodSingleSoft,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventTeamAssignmentMethod) MarshalText() ([]byte, error) {
	switch s {
	case EventTeamAssignmentMethodCompletion:
		return []byte(s), nil
	case EventTeamAssignmentMethodCompletionSoft:
		return []byte(s), nil
	case EventTeamAssignmentMethodSingle:
		return []byte(s), nil
	case EventTeamAssignmentMethodSingleSoft:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventTeamAssignmentMethod) UnmarshalText(data []byte) error {
	switch EventTeamAssignmentMethod(data) {
	case EventTeamAssignmentMethodCompletion:
		*s = EventTeamAssignmentMethodCompletion
		return nil
	case EventTeamAssignmentMethodCompletionSoft:
		*s = EventTeamAssignmentMethodCompletionSoft
		return nil
	case EventTeamAssignmentMethodSingle:
		*s = EventTeamAssignmentMethodSingle
		return nil
	case EventTeamAssignmentMethodSingleSoft:
		*s = EventTeamAssignmentMethodSingleSoft
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Формат участия.
type EventTeamsInvolved string

const (
	EventTeamsInvolvedAny        EventTeamsInvolved = "any"
	EventTeamsInvolvedTeams      EventTeamsInvolved = "teams"
	EventTeamsInvolvedIndividual EventTeamsInvolved = "individual"
)

// AllValues returns all EventTeamsInvolved values.
func (EventTeamsInvolved) AllValues() []EventTeamsInvolved {
	return []EventTeamsInvolved{
		EventTeamsInvolvedAny,
		EventTeamsInvolvedTeams,
		EventTeamsInvolvedIndividual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EventTeamsInvolved) MarshalText() ([]byte, error) {
	switch s {
	case EventTeamsInvolvedAny:
		return []byte(s), nil
	case EventTeamsInvolvedTeams:
		return []byte(s), nil
	case EventTeamsInvolvedIndividual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EventTeamsInvolved) UnmarshalText(data []byte) error {
	switch EventTeamsInvolved(data) {
	case EventTeamsInvolvedAny:
		*s = EventTeamsInvolvedAny
		return nil
	case EventTeamsInvolvedTeams:
		*s = EventTeamsInvolvedTeams
		return nil
	case EventTeamsInvolvedIndividual:
		*s = EventTeamsInvolvedIndividual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventFormat returns new OptEventFormat with value set to v.
func NewOptEventFormat(v EventFormat) OptEventFormat {
	return OptEventFormat{
		Value: v,
		Set:   true,
	}
}

// OptEventFormat is optional EventFormat.
type OptEventFormat struct {
	Value EventFormat
	Set   bool
}

// IsSet returns true if OptEventFormat was set.
func (o OptEventFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventFormat) Reset() {
	var v EventFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventFormat) SetTo(v EventFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventFormat) Get() (v EventFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventFormat) Or(d EventFormat) EventFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventIsDiplomasIssued returns new OptEventIsDiplomasIssued with value set to v.
func NewOptEventIsDiplomasIssued(v EventIsDiplomasIssued) OptEventIsDiplomasIssued {
	return OptEventIsDiplomasIssued{
		Value: v,
		Set:   true,
	}
}

// OptEventIsDiplomasIssued is optional EventIsDiplomasIssued.
type OptEventIsDiplomasIssued struct {
	Value EventIsDiplomasIssued
	Set   bool
}

// IsSet returns true if OptEventIsDiplomasIssued was set.
func (o OptEventIsDiplomasIssued) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventIsDiplomasIssued) Reset() {
	var v EventIsDiplomasIssued
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventIsDiplomasIssued) SetTo(v EventIsDiplomasIssued) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventIsDiplomasIssued) Get() (v EventIsDiplomasIssued, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventIsDiplomasIssued) Or(d EventIsDiplomasIssued) EventIsDiplomasIssued {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventMetaFormat returns new OptEventMetaFormat with value set to v.
func NewOptEventMetaFormat(v EventMetaFormat) OptEventMetaFormat {
	return OptEventMetaFormat{
		Value: v,
		Set:   true,
	}
}

// OptEventMetaFormat is optional EventMetaFormat.
type OptEventMetaFormat struct {
	Value EventMetaFormat
	Set   bool
}

// IsSet returns true if OptEventMetaFormat was set.
func (o OptEventMetaFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventMetaFormat) Reset() {
	var v EventMetaFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventMetaFormat) SetTo(v EventMetaFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventMetaFormat) Get() (v EventMetaFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventMetaFormat) Or(d EventMetaFormat) EventMetaFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventTeamAssignmentMethod returns new OptEventTeamAssignmentMethod with value set to v.
func NewOptEventTeamAssignmentMethod(v EventTeamAssignmentMethod) OptEventTeamAssignmentMethod {
	return OptEventTeamAssignmentMethod{
		Value: v,
		Set:   true,
	}
}

// OptEventTeamAssignmentMethod is optional EventTeamAssignmentMethod.
type OptEventTeamAssignmentMethod struct {
	Value EventTeamAssignmentMethod
	Set   bool
}

// IsSet returns true if OptEventTeamAssignmentMethod was set.
func (o OptEventTeamAssignmentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventTeamAssignmentMethod) Reset() {
	var v EventTeamAssignmentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventTeamAssignmentMethod) SetTo(v EventTeamAssignmentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventTeamAssignmentMethod) Get() (v EventTeamAssignmentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventTeamAssignmentMethod) Or(d EventTeamAssignmentMethod) EventTeamAssignmentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
