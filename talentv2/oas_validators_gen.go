// Code generated by ogen, DO NOT EDIT.

package talentv2

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Event) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Format.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "format",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.TeamsInvolved.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams_involved",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TeamAssignmentMethod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "team_assignment_method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsDiplomasIssued.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "is_diplomas_issued",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.URL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s EventFormat) Validate() error {
	switch s {
	case "offline":
		return nil
	case "online":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s EventIsDiplomasIssued) Validate() error {
	switch s {
	case "all":
		return nil
	case "roles":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *EventMeta) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Format.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "format",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s EventMetaFormat) Validate() error {
	switch s {
	case "offline":
		return nil
	case "online":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s EventRetrieveOK) Validate() error {
	switch s.Type {
	case EventMetaEventRetrieveOK:
		if err := s.EventMeta.Validate(); err != nil {
			return err
		}
		return nil
	case EventEventRetrieveOK:
		if err := s.Event.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s EventTeamAssignmentMethod) Validate() error {
	switch s {
	case "completion":
		return nil
	case "completion_soft":
		return nil
	case "single":
		return nil
	case "single_soft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s EventTeamsInvolved) Validate() error {
	switch s {
	case "any":
		return nil
	case "teams":
		return nil
	case "individual":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
